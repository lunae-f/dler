# GitHub Actionsワークフローの名前
name: CI/CD Pipeline

# ワークフローが実行されるトリガーを定義
on:
  # mainブランチへのプッシュ時に実行
  push:
    branches: [ main ]
  # mainブランチへのプルリクエスト時に実行
  pull_request:
    branches: [ main ]

# 実行されるジョブを定義
jobs:
  # 'build'という名前のジョブ
  build:
    # 最新のUbuntu環境で実行
    runs-on: ubuntu-latest

    # ジョブのステップを定義
    steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Playwrightのブラウザをキャッシュするステップを追加
    #   `actions/cache` を使用して、指定したパスのディレクトリを保存・復元します。
    - name: Cache Playwright browsers
      id: cache-playwright
      uses: actions/cache@v4
      with:
        # ランナー上のキャッシュ保存先パス
        path: ~/.cache/ms-playwright
        # キャッシュのユニークなキー。requirements.txtの内容が変わるとキーも変わり、
        # 新しいキャッシュが作成されます。
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
        # key に完全一致するキャッシュがない場合、このキーで部分一致する最新のキャッシュを探します。
        restore-keys: |
          ${{ runner.os }}-playwright-

    # 3. Docker Composeでアプリケーション全体をバックグラウンドで起動
    - name: Start services via Docker Compose
      run: docker compose up -d

    # 4. (キャッシュ復元時のみ) キャッシュしたブラウザをコンテナにコピー
    #    前のステップでキャッシュが見つかった場合(`cache-hit`がtrue)のみ実行します。
    #    `docker cp` を使い、ランナー（ホスト）のキャッシュディレクトリを、
    #    起動中のapiコンテナ内のPlaywrightが使用するディレクトリにコピーします。
    - name: Copy cached browsers to container
      if: steps.cache-playwright.outputs.cache-hit == 'true'
      run: |
        CONTAINER_ID=$(docker compose ps -q api)
        if [ -z "$CONTAINER_ID" ]; then
          echo "Error: Container ID is empty. Ensure the container is running."
          exit 1
        fi
        docker exec $CONTAINER_ID mkdir -p /root/.cache
        docker cp ~/.cache/ms-playwright $CONTAINER_ID:/root/.cache/
        echo "Copied cached browsers to container ${CONTAINER_ID}."

    # 5. Playwrightのブラウザをインストール（テストコンテナ内）
    #    キャッシュが復元されていれば、このステップはすぐに完了します。
    - name: Install Playwright Browsers
      run: docker compose exec -T api playwright install --with-deps

    # 6. コンテナ内でpytestを実行
    - name: Run tests inside container
      run: docker compose exec -T api pytest

